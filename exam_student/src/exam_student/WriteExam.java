/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package exam_student;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.Timer;

/**
 *
 * @author XII Info
 */
public class WriteExam extends javax.swing.JFrame {

    int[] questionNo, questionId;
    String[] question, optionA, optionB, optionC, optionD, answeredOption, answer;

    int studentId, noOfQnDisplayed = 0, i, numOfSecondsLeft, numOfQuestions, minutes, seconds, timeLeft, rollNo;
    String questionPaperId, a, answerOption, fromwhere, clas, subject, name;

    DB_Connection d = new DB_Connection();
    Connection con;
    ResultSet rs, rs2;
    PreparedStatement ps, ps2;

    static Timer timer;

    ArrayList<Integer> randomNumbers = new ArrayList<>();

    public WriteExam(String questionPaperId, int studentId, String clas, String subject, String name, int rollNo) throws SQLException {
        //this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        this.setUndecorated(true);
        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
            @Override
            public void run() {
                System.out.println("In shutdown hook");
                storingTime();
            }
        }, "Shutdown-thread"));

        initComponents();
        this.subject = subject;
        this.rollNo = rollNo;
        this.clas = clas;
        this.studentId = studentId;
        this.questionPaperId = questionPaperId;
        this.name = name;
        con = d.DB_Connection();

        ps = con.prepareStatement("Select NoOfQuestions from questionpaperdetails where QuestionPaperID=?");
        ps.setString(1, this.questionPaperId);
        rs2 = ps.executeQuery();
        if (rs2.next()) {
            numOfQuestions = rs2.getInt("NoOfQuestions");
        }
        System.out.println(numOfQuestions);
        //Initializing the arrays for storing questions and options locally
        questionNo = new int[numOfQuestions];
        questionId = new int[numOfQuestions];
        question = new String[numOfQuestions];
        optionA = new String[numOfQuestions];
        optionB = new String[numOfQuestions];
        optionC = new String[numOfQuestions];
        optionD = new String[numOfQuestions];
        answer = new String[numOfQuestions];

        answeredOption = new String[numOfQuestions];
        java.util.Arrays.fill(answeredOption, 0, numOfQuestions, "E");
        optionA_RB.requestFocus();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        questionNoLBL = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        optionA_RB = new javax.swing.JRadioButton();
        optionB_RB = new javax.swing.JRadioButton();
        optionC_RB = new javax.swing.JRadioButton();
        optionD_RB = new javax.swing.JRadioButton();
        prevQstn_BTN = new javax.swing.JButton();
        QstNoLBL = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        titleLBL = new javax.swing.JLabel();
        nextQstn_BTN = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        question_TA = new javax.swing.JTextArea();
        uncheckAnswers_BTN = new javax.swing.JButton();
        submit_BTN = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        time_TF = new javax.swing.JTextField();
        image_LBL = new javax.swing.JLabel();
        questionPaperId_LBL = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        sub_LBL = new javax.swing.JLabel();
        subjects_LBL = new javax.swing.JLabel();
        noOfQues_LBL = new javax.swing.JLabel();
        noOfQuestions_LBL = new javax.swing.JLabel();
        Title_NameLBL = new javax.swing.JLabel();
        nameLBL = new javax.swing.JLabel();
        Title_RollLBL = new javax.swing.JLabel();
        Roll_NoLBL = new javax.swing.JLabel();
        Restore_ConnectionBTN = new javax.swing.JButton();

        jButton2.setText("jButton2");

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        questionNoLBL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        questionNoLBL.setText("Question No:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Question:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Options:");

        buttonGroup1.add(optionA_RB);

        buttonGroup1.add(optionB_RB);

        buttonGroup1.add(optionC_RB);

        buttonGroup1.add(optionD_RB);

        prevQstn_BTN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        prevQstn_BTN.setText("Previous Question");
        prevQstn_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevQstn_BTNActionPerformed(evt);
            }
        });

        QstNoLBL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        titleLBL.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        titleLBL.setText("Write Exam");

        nextQstn_BTN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nextQstn_BTN.setText("Next Question");
        nextQstn_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextQstn_BTNActionPerformed(evt);
            }
        });

        question_TA.setEditable(false);
        question_TA.setColumns(20);
        question_TA.setRows(5);
        jScrollPane1.setViewportView(question_TA);

        uncheckAnswers_BTN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        uncheckAnswers_BTN.setText("Uncheck Answers");
        uncheckAnswers_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uncheckAnswers_BTNActionPerformed(evt);
            }
        });

        submit_BTN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        submit_BTN.setText("Submit");
        submit_BTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submit_BTNActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Remaining Time:");

        time_TF.setEditable(false);
        time_TF.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        time_TF.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        image_LBL.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        questionPaperId_LBL.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        sub_LBL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sub_LBL.setText("Subject:");

        subjects_LBL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        noOfQues_LBL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        noOfQues_LBL.setText("No. Of Questions:");

        noOfQuestions_LBL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        Title_NameLBL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Title_NameLBL.setText("Name:");

        nameLBL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        Title_RollLBL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Title_RollLBL.setText("Roll No:");

        Roll_NoLBL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Title_NameLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(sub_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subjects_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(noOfQues_LBL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(noOfQuestions_LBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Title_RollLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Roll_NoLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Roll_NoLBL, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Title_NameLBL, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nameLBL, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
                        .addComponent(Title_RollLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(subjects_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sub_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noOfQues_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noOfQuestions_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {Title_NameLBL, nameLBL, noOfQues_LBL, noOfQuestions_LBL, sub_LBL, subjects_LBL});

        Restore_ConnectionBTN.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Restore_ConnectionBTN.setText("Re-Store Connection");
        Restore_ConnectionBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Restore_ConnectionBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(optionC_RB, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(optionD_RB, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(optionA_RB, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(optionB_RB, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(questionNoLBL)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(QstNoLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(176, 176, 176)
                                .addComponent(questionPaperId_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 156, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 505, Short.MAX_VALUE)
                        .addComponent(titleLBL)
                        .addGap(158, 158, 158)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(image_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(time_TF)
                            .addComponent(Restore_ConnectionBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(51, 51, 51))))
            .addGroup(layout.createSequentialGroup()
                .addGap(700, 700, 700)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(prevQstn_BTN)
                .addGap(18, 18, 18)
                .addComponent(nextQstn_BTN)
                .addGap(18, 18, 18)
                .addComponent(uncheckAnswers_BTN)
                .addGap(28, 28, 28)
                .addComponent(submit_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(218, 218, 218))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {optionA_RB, optionB_RB, optionC_RB, optionD_RB});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(titleLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(questionNoLBL, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                            .addComponent(QstNoLBL, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Restore_ConnectionBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(questionPaperId_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(time_TF, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(optionA_RB)
                                    .addComponent(optionB_RB))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(optionD_RB)
                            .addComponent(optionC_RB))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nextQstn_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(prevQstn_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(uncheckAnswers_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(submit_BTN, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(image_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {optionA_RB, optionB_RB, optionC_RB, optionD_RB});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Roll_NoLBL.setText(Integer.toString(rollNo));
        nameLBL.setText(name);
        subjects_LBL.setText(subject);
        noOfQuestions_LBL.setText(Integer.toString(numOfQuestions));
        questionPaperId_LBL.setText(questionPaperId);
        titleLBL.setLocation((this.getWidth() - titleLBL.getWidth()) / 2, 20);
        getDuration();
        startTimer();

        //Get all questions of the questionpaper and store locally
        if (fromwhere.equals("new")) {
            int totalQuestionsInPaper = 0;
            try {
                PreparedStatement ps5;
                ps5 = con.prepareStatement("select count(*) from questionPaper where questionPaperId=?");
                ps5.setString(1, questionPaperId);
                rs = ps5.executeQuery();
                if (rs.next()) {
                    totalQuestionsInPaper = rs.getInt("count(*)");
                }

                int i;
                for (i = 0; i < totalQuestionsInPaper; i++) {
                    randomNumbers.add(i);
                }
                Collections.shuffle(randomNumbers);
                for (i = numOfQuestions; i < totalQuestionsInPaper; i++) {
                    randomNumbers.remove(numOfQuestions);
                }

                PreparedStatement ps6;
                ps6 = con.prepareStatement("Select questionID, QuestionNo, Question, OptionA, OptionB, OptionC, OptionD from questionbank natural join questionpaper natural join questionpaperdetails where QuestionPaperID=?");
                ps6.setString(1, questionPaperId);
                rs = ps6.executeQuery();
                i = 0;
                for (int j = 0; rs.next(); j++) {
                    if (!randomNumbers.contains(j)) {
                        continue;
                    }
                    questionId[i] = rs.getInt("Questionid");
                    questionNo[i] = i + 1;
                    question[i] = rs.getString("Question");
                    optionA[i] = rs.getString("optionA");
                    optionB[i] = rs.getString("optionB");
                    optionC[i] = rs.getString("optionC");
                    optionD[i] = rs.getString("optionD");

                    PreparedStatement ps7;
                    ps7 = con.prepareStatement("insert into studentanswers set StudentID=? , QuestionPaperID=? ,questionID=? ,AnswerOPtion=?, Answer=?");
                    ps7.setString(1, studentId + "");
                    ps7.setString(2, questionPaperId);
                    ps7.setString(3, questionId[i] + "");
                    ps7.setString(4, "E");
                    ps7.setString(5, null);
                    ps7.executeUpdate();
                    i++;
                }
                prevQstn_BTN.setEnabled(false);
                displayQuestion(0);
                //nextQstn_BTN.setEnabled(false);
                timeLeft = minutes * 60 + seconds;
                PreparedStatement ps3;
                ps3 = con.prepareStatement("insert into timeLeft values(?,?,?)");
                ps3.setInt(1, studentId);
                ps3.setString(2, questionPaperId);
                ps3.setString(3, timeLeft + "");
                ps3.executeUpdate();
            } catch (SQLException ex) {
                Logger.getLogger(WriteExam.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            int totalQuestionsInPaper = 0;
            try {
                PreparedStatement ps4;
                ps4 = con.prepareStatement("select NoOfQuestions from questionPaperdetails where questionPaperId=?");
                ps4.setString(1, questionPaperId);
                rs = ps4.executeQuery();
                if (rs.next()) {
                    totalQuestionsInPaper = rs.getInt("NoOfQuestions");
                }

                PreparedStatement ps5;
                ps5 = con.prepareStatement("Select studentanswers.QuestionID, studentanswers.AnswerOption,Question, OptionA, OptionB, OptionC, OptionD from  questionbank  right join  studentanswers on  studentanswers.QuestionID=questionbank.QuestionID where studentid=?");
                ps5.setInt(1, studentId);
                rs = ps5.executeQuery();

                for (int k = 0; rs.next(); k++) {
                    questionId[k] = rs.getInt("studentanswers.QuestionID");
                    questionNo[k] = k + 1;
                    question[k] = rs.getString("Question");
                    optionA[k] = rs.getString("optionA");
                    optionB[k] = rs.getString("optionB");
                    optionC[k] = rs.getString("optionC");
                    optionD[k] = rs.getString("optionD");
                    answeredOption[k] = rs.getString("studentanswers.AnswerOption");;

                }
                prevQstn_BTN.setEnabled(false);
                displayQuestion(0);
            } catch (SQLException ex) {
                Logger.getLogger(WriteExam.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_formWindowOpened

    public void getDuration() {
        ResultSet rs;
        try {
            PreparedStatement ps1;
            ps1 = con.prepareStatement("select timeLeft from timeLeft where studentId=? and questionpaperid=?");
            ps1.setInt(1, studentId);
            ps1.setString(2, questionPaperId);
            rs = ps1.executeQuery();
            if (rs.next()) {
                numOfSecondsLeft = rs.getInt("timeLeft");
                if (numOfSecondsLeft <= 0) {
                    JOptionPane.showMessageDialog(this, "You've already written the exam!!!!");
                    Student_Login s = new Student_Login(clas, studentId);
                    this.dispose();
                    s.setVisible(true);
                }
                fromwhere = "old";
            } else {
                ps1 = con.prepareStatement("select duration from QuestionPaperDetails where QuestionPaperID=?");
                ps1.setString(1, questionPaperId);
                rs = ps1.executeQuery();
                if (rs.next()) {
                    numOfSecondsLeft = rs.getInt("duration");
                }
                fromwhere = "new";
            }

        } catch (SQLException ex) {
            Logger.getLogger(WriteExam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void displayQuestion(int questionNum) {
        QstNoLBL.setText(Integer.toString(questionNo[questionNum]));
        question_TA.setText(question[questionNum]);
        optionA_RB.setText(optionA[questionNum]);
        optionB_RB.setText(optionB[questionNum]);
        optionC_RB.setText(optionC[questionNum]);
        optionD_RB.setText(optionD[questionNum]);
        a = answeredOption[noOfQnDisplayed];

        if (questionNum + 1 == numOfQuestions) {
            nextQstn_BTN.setEnabled(false);
        } else if (questionNum == 0) {
            prevQstn_BTN.setEnabled(false);
        }
        switch (a) {
            case "A":
                optionA_RB.setSelected(true);
                break;
            case "B":
                optionB_RB.setSelected(true);
                break;
            case "C":
                optionC_RB.setSelected(true);
                break;
            case "D":
                optionD_RB.setSelected(true);
                break;
            case "E":
                buttonGroup1.clearSelection();
                break;

        }
    }

    public void startTimer() {
        minutes = numOfSecondsLeft / 60;
        seconds = numOfSecondsLeft % 60;

        Thread t = new Thread(new Runnable() {

            @Override
            public void run() {
                while (true) {
                    try {
                        if (0 == numOfSecondsLeft) {
                            timeLeft = -1;
                            checkAnswers();
                            break;
                        }
                        if (seconds == 0) {
                            if (minutes > 0) {
                                minutes--;
                                seconds = 59;
                            } else {
                                checkAnswers();
                                break;
                            }
                        }
                        time_TF.setText(minutes + " : " + seconds);
                        Thread.sleep(1000);
                        seconds--;
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        });

        t.start();//start thread to display counter
    }

    private void prevQstn_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevQstn_BTNActionPerformed
        nextQstn_BTN.setEnabled(true);

        updateRecentAnswer();
        noOfQnDisplayed--;
        System.out.println(noOfQnDisplayed);
        if (noOfQnDisplayed < 0) {
            prevQstn_BTN.setEnabled(false);
            noOfQnDisplayed++;
        } else {
            displayQuestion(noOfQnDisplayed);
        }
    }//GEN-LAST:event_prevQstn_BTNActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

    }//GEN-LAST:event_formWindowActivated

    private void nextQstn_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextQstn_BTNActionPerformed
        prevQstn_BTN.setEnabled(true);

        updateRecentAnswer();
        noOfQnDisplayed++;
        System.out.println(noOfQnDisplayed);
        if (noOfQnDisplayed >= numOfQuestions) {
            nextQstn_BTN.setEnabled(false);
            noOfQnDisplayed--;
        } else {
            displayQuestion(noOfQnDisplayed);
        }
    }//GEN-LAST:event_nextQstn_BTNActionPerformed

    public void updateRecentAnswer() {
        try {

            if (optionA_RB.isSelected() == true) {
                answerOption = "A";
                answer[noOfQnDisplayed] = optionA_RB.getText();
            } else if (optionB_RB.isSelected() == true) {
                answerOption = "B";
                answer[noOfQnDisplayed] = optionB_RB.getText();
            } else if (optionC_RB.isSelected() == true) {
                answerOption = "C";
                answer[noOfQnDisplayed] = optionC_RB.getText();
            } else if (optionD_RB.isSelected() == true) {
                answerOption = "D";
                answer[noOfQnDisplayed] = optionD_RB.getText();
            } else if (optionA_RB.isSelected() == false || optionB_RB.isSelected() == false || optionC_RB.isSelected() == false || optionD_RB.isSelected() == false) {
                answerOption = "E";
                answer[noOfQnDisplayed] = null;
            }
            PreparedStatement ps9;
            ps9 = con.prepareStatement("update studentanswers set AnswerOption=? , Answer=? where StudentID=? and QuestionPaperID=? and questionID=?");
            ps9.setString(1, answerOption);
            ps9.setString(2, answer[noOfQnDisplayed]);
            ps9.setString(3, studentId + "");
            ps9.setString(4, questionPaperId);
            ps9.setString(5, questionId[noOfQnDisplayed] + "");
            ps9.executeUpdate();
            answeredOption[noOfQnDisplayed] = answerOption;
            timeLeft = minutes * 60 + seconds;
            ps2 = con.prepareStatement("update timeLeft set TimeLeft=? where StudentID=? and QuestionPaperID=?");
            ps2.setString(1, timeLeft + "");
            ps2.setInt(2, studentId);
            ps2.setString(3, questionPaperId);
            ps2.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(WriteExam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void uncheckAnswers_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uncheckAnswers_BTNActionPerformed
        buttonGroup1.clearSelection();
    }//GEN-LAST:event_uncheckAnswers_BTNActionPerformed

    private void submit_BTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submit_BTNActionPerformed
        int message = 0;
        updateRecentAnswer();
        for (int k = 0; k < numOfQuestions; k++) {
            if (answeredOption[k].equals("E")) {
                message = JOptionPane.showConfirmDialog(this, "SOME QUESTIONS NEED TO BE ANSWERED.\n"
                        + "ARE YOU SURE TO SUBMIT?!!");
                break;
            }
        }
        if (i - 1 == numOfQuestions) {
            message = JOptionPane.showConfirmDialog(this, "ARE YOU SURE!! YOU WANT TO SUBMIT YOUR ANSWERS");
        }
        if (message == JOptionPane.OK_OPTION) {
            timeLeft = -1;
            storingTime();
            checkAnswers();
        }
    }//GEN-LAST:event_submit_BTNActionPerformed

    public void checkAnswers() {
        try {
            Result a = new Result(questionPaperId, questionId, answeredOption, numOfQuestions, studentId, clas, subject, name, question, answer, optionA, optionB, optionC, optionD);
            a.setVisible(true);
            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(WriteExam.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
    }//GEN-LAST:event_formWindowClosed

    public void storingTime() {
        PreparedStatement ps, ps2;
        try {
            if (timeLeft != -1) {
                timeLeft = minutes * 60 + seconds;
            }
            ps = con.prepareStatement("select studentId from timeLeft where studentId=? and QuestionPaperId=?");
            ps.setInt(1, studentId);
            ps.setString(2, questionPaperId);
            rs = ps.executeQuery();
            if (rs.next()) {
                ps2 = con.prepareStatement("update timeLeft set timeLeft=? where studentId=? and QuestionPaperId=? ");
                ps2.setString(1, timeLeft + "");
                ps2.setInt(2, studentId);
                ps2.setString(3, questionPaperId);
            } else {
                ps2 = con.prepareStatement("insert into timeLeft values(?,?,?)");
                ps2.setInt(1, studentId);
                ps2.setString(2, questionPaperId);
                ps2.setString(3, timeLeft + "");
            }
            ps2.executeUpdate();

        } catch (SQLException ex) {
            Logger.getLogger(WriteExam.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        storingTime();
    }//GEN-LAST:event_formWindowClosing

    private void Restore_ConnectionBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Restore_ConnectionBTNActionPerformed
        try {
            con = d.DB_Connection();
        } catch (SQLException ex) {
            Logger.getLogger(WriteExam.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_Restore_ConnectionBTNActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.lang.ClassNotFoundException
     * @throws java.lang.InstantiationException
     * @throws java.lang.IllegalAccessException
     */
    public static void main(String args[]) throws ClassNotFoundException, InstantiationException, IllegalAccessException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WriteExam.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel QstNoLBL;
    private javax.swing.JButton Restore_ConnectionBTN;
    private javax.swing.JLabel Roll_NoLBL;
    private javax.swing.JLabel Title_NameLBL;
    private javax.swing.JLabel Title_RollLBL;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel image_LBL;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nameLBL;
    private javax.swing.JButton nextQstn_BTN;
    private javax.swing.JLabel noOfQues_LBL;
    private javax.swing.JLabel noOfQuestions_LBL;
    private javax.swing.JRadioButton optionA_RB;
    private javax.swing.JRadioButton optionB_RB;
    private javax.swing.JRadioButton optionC_RB;
    private javax.swing.JRadioButton optionD_RB;
    private javax.swing.JButton prevQstn_BTN;
    private javax.swing.JLabel questionNoLBL;
    private javax.swing.JLabel questionPaperId_LBL;
    private javax.swing.JTextArea question_TA;
    private javax.swing.JLabel sub_LBL;
    private javax.swing.JLabel subjects_LBL;
    private javax.swing.JButton submit_BTN;
    private javax.swing.JTextField time_TF;
    private javax.swing.JLabel titleLBL;
    private javax.swing.JButton uncheckAnswers_BTN;
    // End of variables declaration//GEN-END:variables

}
